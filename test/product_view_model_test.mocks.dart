// Mocks generated by Mockito 5.4.4 from annotations
// in simple_mobile_application/test/product_view_model_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:simple_mobile_application/data/repositories/product_repository.dart'
    as _i2;
import 'package:simple_mobile_application/domain/entities/product.dart' as _i5;
import 'package:simple_mobile_application/domain/use_cases/get_products_use_case.dart'
    as _i3;
import 'package:simple_mobile_application/domain/use_cases/toggle_favorite_use_case.dart'
    as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeProductRepository_0 extends _i1.SmartFake
    implements _i2.ProductRepository {
  _FakeProductRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetProductsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetProductsUseCase extends _i1.Mock
    implements _i3.GetProductsUseCase {
  MockGetProductsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ProductRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeProductRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.ProductRepository);

  @override
  _i4.Future<List<_i5.Product>> call({
    int? page = 1,
    int? limit = 20,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {
            #page: page,
            #limit: limit,
          },
        ),
        returnValue: _i4.Future<List<_i5.Product>>.value(<_i5.Product>[]),
      ) as _i4.Future<List<_i5.Product>>);
}

/// A class which mocks [ToggleFavoriteUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockToggleFavoriteUseCase extends _i1.Mock
    implements _i6.ToggleFavoriteUseCase {
  MockToggleFavoriteUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ProductRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeProductRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.ProductRepository);

  @override
  _i4.Future<void> call(String? productId) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [productId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
